{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-timecraft","title":"Welcome to TimeCraft","text":"<p>An advanced solution for time series analysis, database integration, and task automation, with dynamic notifications and a powerful CLI.</p> <p>TimeCraft is designed to streamline your workflow by integrating time series data with databases, automating tasks, and providing real-time notifications. It features a robust command-line interface (CLI) for efficient management and execution of tasks.</p> <p>For complete documentation, see README or the Portuguese version.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>Developer: Rafael Mori </li> <li>GitHub | LinkedIn</li> <li>Twitter | Gravatar</li> </ul>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at discord.gg/CCBJsFHT. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla\u2019s code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"INSTALL/","title":"TimeCraft - Guia de Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":""},{"location":"INSTALL/#instalacao","title":"\ud83d\udce6 Instala\u00e7\u00e3o","text":""},{"location":"INSTALL/#instalacao-rapida-recomendada","title":"Instala\u00e7\u00e3o R\u00e1pida (Recomendada)","text":"<pre><code># Instalar TimeCraft com recursos principais\npip install timecraft\n\n# Ou instalar com todos os recursos (AI, Servidor Web)\npip install timecraft[all]\n</code></pre>"},{"location":"INSTALL/#instalacao-para-desenvolvimento","title":"Instala\u00e7\u00e3o para Desenvolvimento","text":"<pre><code># Clonar o reposit\u00f3rio\ngit clone https://github.com/rafa-mori/timecraft.git\ncd timecraft\n\n# Configura\u00e7\u00e3o r\u00e1pida com script de desenvolvimento\n./dev.sh setup\n\n# Ou configura\u00e7\u00e3o manual\npython3 -m venv venv\nsource venv/bin/activate  # No Windows: venv\\Scripts\\activate\npip install -e .\n</code></pre>"},{"location":"INSTALL/#recursos-opcionais","title":"\ud83c\udfaf Recursos Opcionais","text":""},{"location":"INSTALL/#recursos-de-ai-voz-chatbot-processamento-de-audio","title":"Recursos de AI (Voz, Chatbot, Processamento de \u00c1udio)","text":"<pre><code>pip install timecraft[ai]\n</code></pre> <p>Depend\u00eancias inclu\u00eddas:</p> <ul> <li><code>pyaudio</code> - Captura e processamento de \u00e1udio</li> <li><code>SpeechRecognition</code> - Reconhecimento de fala</li> <li><code>pyttsx3</code> - S\u00edntese de voz</li> <li><code>openai</code> - Integra\u00e7\u00e3o com OpenAI</li> <li><code>fastapi</code> - API web</li> </ul>"},{"location":"INSTALL/#servidor-web-e-api","title":"Servidor Web e API","text":"<pre><code>pip install timecraft[web]\n</code></pre> <p>Depend\u00eancias inclu\u00eddas:</p> <ul> <li><code>fastapi</code> - Framework web moderno</li> <li><code>uvicorn</code> - Servidor ASGI</li> <li><code>pydantic</code> - Valida\u00e7\u00e3o de dados</li> </ul>"},{"location":"INSTALL/#conectores-de-banco-de-dados","title":"Conectores de Banco de Dados","text":"<pre><code>pip install timecraft[db]\n</code></pre> <p>Depend\u00eancias inclu\u00eddas:</p> <ul> <li><code>psycopg2</code> - PostgreSQL</li> <li><code>pymysql</code> - MySQL</li> <li><code>pyodbc</code> - SQL Server</li> </ul>"},{"location":"INSTALL/#ferramentas-de-desenvolvimento","title":"Ferramentas de Desenvolvimento","text":"<pre><code>pip install timecraft[dev]\n</code></pre> <p>Depend\u00eancias inclu\u00eddas:</p> <ul> <li><code>pytest</code> - Testes</li> <li><code>black</code> - Formata\u00e7\u00e3o de c\u00f3digo</li> <li><code>flake8</code> - Linting</li> <li><code>mypy</code> - Verifica\u00e7\u00e3o de tipos</li> </ul>"},{"location":"INSTALL/#configuracao","title":"\ud83d\udd27 Configura\u00e7\u00e3o","text":""},{"location":"INSTALL/#verificacao-da-instalacao","title":"Verifica\u00e7\u00e3o da Instala\u00e7\u00e3o","text":"<pre><code>import timecraft\n\n# Verificar vers\u00e3o e recursos dispon\u00edveis\nprint(f\"TimeCraft v{timecraft.__version__}\")\nprint(f\"Recursos AI: {timecraft.AI_AVAILABLE}\")\nprint(f\"Servidor MCP: {timecraft.SERVER_AVAILABLE}\")\n</code></pre>"},{"location":"INSTALL/#teste-rapido","title":"Teste R\u00e1pido","text":"<pre><code># Executar teste de instala\u00e7\u00e3o\npython examples/quick_test.py\n\n# Executar demo b\u00e1sico\npython examples/demo_basic.py\n</code></pre>"},{"location":"INSTALL/#primeiros-passos","title":"\ud83d\ude80 Primeiros Passos","text":""},{"location":"INSTALL/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>import timecraft\n\n# Criar modelo de an\u00e1lise temporal\nmodel = timecraft.TimeCraftAI()\n\n# Carregar dados\ndata = model.load_data(\"dados.csv\")\n\n# Fazer previs\u00f5es\nforecasts = model.forecast(data, periods=30)\n\n# Visualizar resultados\nmodel.plot_forecast()\n</code></pre>"},{"location":"INSTALL/#recursos-avancados-se-ai-disponivel","title":"Recursos Avan\u00e7ados (se AI dispon\u00edvel)","text":"<pre><code>import timecraft\n\nif timecraft.AI_AVAILABLE:\n    # Chatbot para an\u00e1lise de dados\n    chatbot = timecraft.ChatbotActions()\n    response = chatbot.process_query(\"Analise meus dados de vendas\")\n\n    # Processamento de \u00e1udio\n    audio = timecraft.AudioProcessor()\n    audio.start_recording()\n\n    # S\u00edntese de voz\n    voice = timecraft.VoiceSynthesizer()\n    voice.speak(\"An\u00e1lise conclu\u00edda!\")\n</code></pre>"},{"location":"INSTALL/#script-de-desenvolvimento","title":"\ud83d\udee0\ufe0f Script de Desenvolvimento","text":"<p>O TimeCraft inclui um script de desenvolvimento que facilita o trabalho:</p> <pre><code># Configurar ambiente\n./dev.sh setup\n\n# Executar testes\n./dev.sh test\n\n# Executar demo\n./dev.sh run-demo\n\n# Limpar ambiente\n./dev.sh clean\n\n# Ver ajuda\n./dev.sh help\n</code></pre>"},{"location":"INSTALL/#requisitos-do-sistema","title":"\ud83d\udccb Requisitos do Sistema","text":"<ul> <li>Python: 3.8 ou superior</li> <li>Sistema Operacional: Linux, macOS, Windows</li> <li>RAM: 512MB (m\u00ednimo), 2GB (recomendado)</li> <li>Espa\u00e7o em Disco: 100MB (core), 500MB (com AI)</li> </ul>"},{"location":"INSTALL/#dependencias-do-sistema-para-recursos-ai","title":"Depend\u00eancias do Sistema (para recursos AI)","text":"<p>Ubuntu/Debian:</p> <pre><code>sudo apt-get update\nsudo apt-get install portaudio19-dev python3-pyaudio\n</code></pre> <p>macOS:</p> <pre><code>brew install portaudio\n</code></pre> <p>Windows:</p> <pre><code># PyAudio ser\u00e1 instalado automaticamente via pip\n</code></pre>"},{"location":"INSTALL/#solucao-de-problemas","title":"\ud83d\udd0d Solu\u00e7\u00e3o de Problemas","text":""},{"location":"INSTALL/#erro-modulenotfounderror-no-module-named-pyaudio","title":"Erro: \u201cModuleNotFoundError: No module named \u2018pyaudio\u2019\u201d","text":"<p>Recursos de AI n\u00e3o est\u00e3o dispon\u00edveis. Para instalar:</p> <pre><code># Linux/Mac\npip install timecraft[ai]\n\n# Se ainda houver erro no Linux:\nsudo apt-get install portaudio19-dev\npip install pyaudio\n</code></pre>"},{"location":"INSTALL/#erro-no-module-named-prophet","title":"Erro: \u201cNo module named \u2018prophet\u2019\u201d","text":"<p>Depend\u00eancias de previs\u00e3o n\u00e3o est\u00e3o instaladas:</p> <pre><code>pip install prophet plotly\n</code></pre>"},{"location":"INSTALL/#modo-de-desenvolvimento-vs-producao","title":"Modo de Desenvolvimento vs Produ\u00e7\u00e3o","text":"<ul> <li>Produ\u00e7\u00e3o: <code>pip install timecraft</code></li> <li>Desenvolvimento: <code>pip install -e .</code> (no diret\u00f3rio do projeto)</li> </ul> <p>O TimeCraft detecta automaticamente o modo e ajusta os imports adequadamente.</p>"},{"location":"INSTALL/#links-uteis","title":"\ud83d\udd17 Links \u00dateis","text":"<ul> <li>Documenta\u00e7\u00e3o Completa</li> <li>Exemplos</li> <li>Changelog</li> <li>Contribuindo</li> </ul>"},{"location":"INSTALL_AI/","title":"\ud83d\udd27 TimeCraft AI - Guia de Instala\u00e7\u00e3o e Configura\u00e7\u00e3o","text":""},{"location":"INSTALL_AI/#pre-requisitos","title":"\ud83d\udccb Pr\u00e9-requisitos","text":""},{"location":"INSTALL_AI/#sistema-operacional","title":"Sistema Operacional","text":"<ul> <li>\u2705 Linux (Ubuntu/Debian recomendado)</li> <li>\u2705 macOS</li> <li>\u2705 Windows 10/11</li> </ul>"},{"location":"INSTALL_AI/#python","title":"Python","text":"<ul> <li>Python 3.8+ (recomendado: 3.10+)</li> <li>pip atualizado</li> </ul>"},{"location":"INSTALL_AI/#hardware","title":"Hardware","text":"<ul> <li>\ud83c\udfa4 Microfone funcional</li> <li>\ud83d\udd0a Alto-falantes ou fones de ouvido</li> <li>\ud83d\udcbe Pelo menos 2GB de espa\u00e7o livre (para modelos de voz)</li> </ul>"},{"location":"INSTALL_AI/#instalacao-rapida","title":"\ud83d\ude80 Instala\u00e7\u00e3o R\u00e1pida","text":""},{"location":"INSTALL_AI/#1-clonar-o-repositorio","title":"1. Clonar o reposit\u00f3rio","text":"<pre><code>git clone https://github.com/seu-usuario/timecraft.git\ncd timecraft\n</code></pre>"},{"location":"INSTALL_AI/#2-criar-ambiente-virtual","title":"2. Criar ambiente virtual","text":"<pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/macOS\n# ou\nvenv\\Scripts\\activate     # Windows\n</code></pre>"},{"location":"INSTALL_AI/#3-instalar-dependencias","title":"3. Instalar depend\u00eancias","text":"<pre><code>pip install -r requirements-ai.txt\n</code></pre>"},{"location":"INSTALL_AI/#4-baixar-modelo-de-voz-vosk","title":"4. Baixar modelo de voz (Vosk)","text":"<pre><code># Portugu\u00eas (recomendado)\nmkdir -p models\ncd models\nwget https://alphacephei.com/vosk/models/vosk-model-small-pt-0.3.zip\nunzip vosk-model-small-pt-0.3.zip\nmv vosk-model-small-pt-0.3 vosk-model-small-pt\ncd ..\n</code></pre>"},{"location":"INSTALL_AI/#5-configurar-chave-do-picovoice-opcional","title":"5. Configurar chave do Picovoice (opcional)","text":"<pre><code># Obtenha uma chave gratuita em: https://picovoice.ai/\nexport PICOVOICE_ACCESS_KEY=\"sua_chave_aqui\"\n</code></pre>"},{"location":"INSTALL_AI/#6-testar-instalacao","title":"6. Testar instala\u00e7\u00e3o","text":"<pre><code>python test_timecraft_ai.py --mode test\n</code></pre>"},{"location":"INSTALL_AI/#configuracao-de-audio","title":"\ud83c\udfa4 Configura\u00e7\u00e3o de \u00c1udio","text":""},{"location":"INSTALL_AI/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<pre><code># Instalar depend\u00eancias de \u00e1udio\nsudo apt update\nsudo apt install portaudio19-dev python3-pyaudio alsa-utils\n\n# Testar microfone\narecord -l  # Listar dispositivos de grava\u00e7\u00e3o\naplay -l    # Listar dispositivos de reprodu\u00e7\u00e3o\n\n# Ajustar volume\nalsamixer\n</code></pre>"},{"location":"INSTALL_AI/#macos","title":"macOS","text":"<pre><code># Instalar PortAudio via Homebrew\nbrew install portaudio\n\n# Verificar permiss\u00f5es de microfone\n# V\u00e1 em: System Preferences &gt; Security &amp; Privacy &gt; Privacy &gt; Microphone\n# Adicione seu terminal/IDE \u00e0 lista\n</code></pre>"},{"location":"INSTALL_AI/#windows","title":"Windows","text":"<pre><code># Instalar Microsoft C++ Build Tools se necess\u00e1rio\n# Baixe de: https://visualstudio.microsoft.com/visual-cpp-build-tools/\n\n# Verificar dispositivos de \u00e1udio\n# Painel de Controle &gt; Som &gt; Grava\u00e7\u00e3o/Reprodu\u00e7\u00e3o\n</code></pre>"},{"location":"INSTALL_AI/#solucao-de-problemas","title":"\ud83d\udd27 Solu\u00e7\u00e3o de Problemas","text":""},{"location":"INSTALL_AI/#erro-no-module-named-pyaudio","title":"\u274c Erro: \u201cNo module named \u2018pyaudio\u2019\u201d","text":"<pre><code># Linux\nsudo apt install portaudio19-dev\npip install pyaudio\n\n# Windows\npip install pipwin\npipwin install pyaudio\n\n# macOS\nbrew install portaudio\npip install pyaudio\n</code></pre>"},{"location":"INSTALL_AI/#erro-unable-to-import-pvporcupine","title":"\u274c Erro: \u201cUnable to import \u2018pvporcupine\u2019\u201d","text":"<pre><code># Instalar Picovoice\npip install pvporcupine\n\n# Configurar chave de API\nexport PICOVOICE_ACCESS_KEY=\"sua_chave\"\n</code></pre>"},{"location":"INSTALL_AI/#erro-alsa-lib-pcm_dsnoopc-linux","title":"\u274c Erro: \u201cALSA lib pcm_dsnoop.c\u201d (Linux)","text":"<pre><code># Adicionar ao ~/.bashrc ou ~/.zshrc:\nexport ALSA_PCM_CARD=0\nexport ALSA_PCM_DEVICE=0\n\n# Ou executar com:\nALSA_PCM_CARD=0 ALSA_PCM_DEVICE=0 python test_timecraft_ai.py\n</code></pre>"},{"location":"INSTALL_AI/#erro-access-denied-microfone","title":"\u274c Erro: \u201cAccess denied\u201d (microfone)","text":"<ul> <li>macOS: System Preferences &gt; Security &amp; Privacy &gt; Privacy &gt; Microphone</li> <li>Windows: Settings &gt; Privacy &gt; Microphone</li> <li>Linux: Verificar se o usu\u00e1rio est\u00e1 no grupo \u2018audio\u2019</li> </ul> <p><code>bash   sudo usermod -a -G audio $USER   # Reiniciar sess\u00e3o</code></p>"},{"location":"INSTALL_AI/#erro-model-file-not-found","title":"\u274c Erro: \u201cModel file not found\u201d","text":"<pre><code># Verificar se o modelo foi baixado corretamente\nls -la models/vosk-model-small-pt/\n\n# Re-baixar se necess\u00e1rio\ncd models\nrm -rf vosk-model-small-pt*\nwget https://alphacephei.com/vosk/models/vosk-model-small-pt-0.3.zip\nunzip vosk-model-small-pt-0.3.zip\nmv vosk-model-small-pt-0.3 vosk-model-small-pt\n</code></pre>"},{"location":"INSTALL_AI/#modos-de-uso","title":"\ud83c\udfaf Modos de Uso","text":""},{"location":"INSTALL_AI/#1-teste-basico","title":"1. Teste B\u00e1sico","text":"<pre><code>python test_timecraft_ai.py --mode test\n</code></pre> <ul> <li>Testa todas as funcionalidades b\u00e1sicas</li> <li>N\u00e3o requer microfone/\u00e1udio</li> </ul>"},{"location":"INSTALL_AI/#2-servidor-fastapi","title":"2. Servidor FastAPI","text":"<pre><code>python test_timecraft_ai.py --mode server\n</code></pre> <ul> <li>Inicia servidor web na porta 8000</li> <li>Acesse: http://localhost:8000/docs</li> </ul>"},{"location":"INSTALL_AI/#3-modo-voz-continua","title":"3. Modo Voz Cont\u00ednua","text":"<pre><code>python test_timecraft_ai.py --mode voice\n</code></pre> <ul> <li>Escuta continuamente</li> <li>Fale comandos como: \u201chist\u00f3rico\u201d, \u201cprevis\u00e3o\u201d, \u201cinsights\u201d</li> </ul>"},{"location":"INSTALL_AI/#4-modo-hotword","title":"4. Modo Hotword","text":"<pre><code>python test_timecraft_ai.py --mode hotword\n</code></pre> <ul> <li>Aguarda palavra-chave \u201cMCP\u201d</li> <li>Depois fale seu comando</li> </ul>"},{"location":"INSTALL_AI/#api-endpoints","title":"\ud83c\udf10 API Endpoints","text":""},{"location":"INSTALL_AI/#health-check","title":"Health Check","text":"<pre><code>curl http://localhost:8000/health\n</code></pre>"},{"location":"INSTALL_AI/#enviar-comando","title":"Enviar Comando","text":"<pre><code>curl -X POST http://localhost:8000/mcp/command \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"me mostre o hist\u00f3rico\"}'\n</code></pre>"},{"location":"INSTALL_AI/#listar-plugins","title":"Listar Plugins","text":"<pre><code>curl http://localhost:8000/mcp/plugins\n</code></pre>"},{"location":"INSTALL_AI/#ativar-plugin-openai","title":"Ativar Plugin OpenAI","text":"<pre><code>curl -X POST http://localhost:8000/mcp/plugins/openai/enable\n</code></pre>"},{"location":"INSTALL_AI/#configurar-api-key","title":"Configurar API Key","text":"<pre><code>curl -X POST http://localhost:8000/mcp/plugins/openai/config \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"api_key\": \"sua_chave_openai\"}'\n</code></pre>"},{"location":"INSTALL_AI/#desenvolvimento","title":"\ud83d\udd2c Desenvolvimento","text":""},{"location":"INSTALL_AI/#estrutura-de-arquivos","title":"Estrutura de Arquivos","text":"<pre><code>src/timecraft_ai/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 audio_processor.py      # Captura e transcri\u00e7\u00e3o de \u00e1udio\n\u251c\u2500\u2500 chatbot_actions.py      # A\u00e7\u00f5es do chatbot (dados, previs\u00f5es)\n\u251c\u2500\u2500 chatbot_msgset.py       # Handler de mensagens\n\u251c\u2500\u2500 chatbot_timecraft.py    # API Flask alternativa\n\u251c\u2500\u2500 hotword_detector.py     # Detec\u00e7\u00e3o de palavra-chave\n\u251c\u2500\u2500 mcp_command_handler.py  # Handler central de comandos\n\u251c\u2500\u2500 mcp_server.py          # Servidor FastAPI principal\n\u2514\u2500\u2500 voice_synthesizer.py   # S\u00edntese de voz\n</code></pre>"},{"location":"INSTALL_AI/#adicionar-novos-comandos","title":"Adicionar Novos Comandos","text":"<ol> <li>Edite <code>chatbot_actions.py</code> - adicione novos m\u00e9todos</li> <li>Edite <code>chatbot_msgset.py</code> - adicione padr\u00f5es de reconhecimento</li> <li>Teste com <code>python test_timecraft_ai.py --mode voice</code></li> </ol>"},{"location":"INSTALL_AI/#integrar-llms-externos","title":"Integrar LLMs Externos","text":"<ol> <li>Configure chave de API via endpoint <code>/mcp/plugins/{plugin}/config</code></li> <li>Ative o plugin via <code>/mcp/plugins/{plugin}/enable</code></li> <li>Edite <code>mcp_command_handler.py</code> para rotear comandos</li> </ol>"},{"location":"INSTALL_AI/#suporte","title":"\ud83d\udcde Suporte","text":""},{"location":"INSTALL_AI/#logs-e-debug","title":"Logs e Debug","text":"<pre><code># Executar com logs detalhados\nexport PYTHONPATH=/srv/apps/KUBEX/timecraft/src\npython -c \"\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nfrom timecraft_ai.audio_processor import AudioProcessor\n# ... seu c\u00f3digo de teste\n\"\n</code></pre>"},{"location":"INSTALL_AI/#contato","title":"Contato","text":"<ul> <li>\ud83d\udce7 Email: faelmori@gmail.com</li> <li>\ud83d\udc19 GitHub: Issues</li> <li>\ud83d\udcac LinkedIn: Rafa Mori</li> </ul>"},{"location":"INSTALL_AI/#licenca","title":"\ud83d\udcc4 Licen\u00e7a","text":"<p>MIT License - Veja LICENSE para detalhes.</p>"},{"location":"NOTICE/","title":"NOTICE","text":"<p>This software is licensed under the MIT License. Below are additional notes on usage and attribution:</p>"},{"location":"NOTICE/#attribution-requirement-optional","title":"Attribution Requirement (Optional)","text":"<ul> <li>When distributing or using this software, please provide credit to the original author(s) in one or more of the following ways:</li> <li>Retain the copyright notice: <code>Copyright (c) 2025 Rafael Mori</code>.</li> <li>Include a link to the original project repository or website.</li> </ul>"},{"location":"NOTICE/#acknowledgment","title":"Acknowledgment","text":"<p>This project was developed with the goal of enhancing usability and providing open access to its features.</p> <p>For further information about the license and terms of use, please refer to the <code>LICENSE</code> file included with this project.</p>"},{"location":"README.en/","title":"README","text":"<p>An advanced solution for time series analysis, database integration, and task automation, with dynamic notifications and a powerful CLI.</p>"},{"location":"README.en/#table-of-contents","title":"Table of Contents","text":"<ol> <li>About the Project</li> <li>Features</li> <li>Installation</li> <li>Usage<ul> <li>CLI</li> <li>Examples</li> <li>Configuration</li> </ul> </li> <li>Scheduled Execution</li> <li>Webhook Notifications</li> <li>Roadmap</li> <li>Contributing</li> <li>Contact</li> </ol>"},{"location":"README.en/#about-the-project","title":"About the Project","text":"<p>TimeCraft is a flexible and powerful solution for time series analysis, database integration, and task automation. Developed in Python, it offers webhook notification support, scheduled model execution, and an intuitive CLI to streamline data workflows.</p> <p>Why TimeCraft?</p> <ul> <li>\ud83d\udcc8 Advanced Analysis: Robust scripts for modeling, forecasting, and evaluating temporal data.</li> <li>\ud83d\udee2\ufe0f Simple Integration: Tools to connect and query multiple database systems.</li> <li>\u2699\ufe0f Automation &amp; Notifications: Modules to automate data workflows and send alerts.</li> </ul>"},{"location":"README.en/#features","title":"Features","text":"<p>\u2728 Plug-and-Play Models:</p> <ul> <li>ARIMA, Prophet, LSTM, and other ready-to-use models.</li> <li>Easy customization and extension.</li> </ul> <p>\ud83d\udd17 Database Integration:</p> <ul> <li>Efficient connection to different database systems.</li> <li>Scripts for data import and querying.</li> </ul> <p>\u23f0 Scheduled Execution:</p> <ul> <li>Schedule automatic model runs (cronjob-like).</li> <li>CLI and Python API for scheduling.</li> </ul> <p>\ud83d\udd14 Dynamic Notifications:</p> <ul> <li>Send notifications via Webhook (Slack, Discord, custom APIs).</li> <li>Customizable payloads for each platform.</li> </ul> <p>\ud83d\udcbb Powerful CLI:</p> <ul> <li>Simple commands to run models, schedule executions, and monitor tasks.</li> <li>Extensible for new workflows.</li> </ul>"},{"location":"README.en/#installation","title":"Installation","text":""},{"location":"README.en/#quick-installation-recommended","title":"\ud83d\udce6 Quick Installation (Recommended)","text":"<pre><code># Install TimeCraft with core features\npip install timecraft\n\n# Or install with all features (AI, Web Server)\npip install timecraft[all]\n</code></pre>"},{"location":"README.en/#development-installation","title":"\ud83d\udd27 Development Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/rafa-mori/timecraft.git\ncd timecraft\n\n# Quick setup with development script\n./dev.sh setup\n\n# Or manual setup\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -e .\n</code></pre>"},{"location":"README.en/#optional-features","title":"\ud83c\udfaf Optional Features","text":"<pre><code># AI features (voice, chatbot, audio processing)\npip install timecraft[ai]\n\n# Web server and API features\npip install timecraft[web]\n\n# Database connectors (PostgreSQL, MySQL, etc.)\npip install timecraft[db]\n\n# Development tools\npip install timecraft[dev]\n</code></pre>"},{"location":"README.en/#usage","title":"Usage","text":""},{"location":"README.en/#python-usage-recommended","title":"\ud83d\udc0d Python Usage (Recommended)","text":"<pre><code>import timecraft\n\n# Check available features\nprint(f\"AI available: {timecraft.AI_AVAILABLE}\")\nprint(f\"Version: {timecraft.__version__}\")\n\n# Create and use TimeCraft model\nmodel = timecraft.TimeCraftAI()\ndata = model.load_data(\"data/hist_cambio.csv\")\nforecasts = model.forecast(data, periods=30)\n\n# If AI features are available\nif timecraft.AI_AVAILABLE:\n    chatbot = timecraft.ChatbotActions()\n    response = chatbot.process_query(\"Analyze my data\")\n</code></pre>"},{"location":"README.en/#cli-usage","title":"\ud83d\udda5\ufe0f CLI Usage","text":"<pre><code># Run quick test\npython examples/quick_test.py\n\n# Run demo\npython examples/demo_basic.py\n\n# Development mode\n./dev.sh test\n</code></pre>"},{"location":"README.en/#advanced-examples","title":"\ud83d\udcca Advanced Examples","text":"<pre><code>import timecraft\n\n# Database connection\ndb = timecraft.DatabaseConnector()\ndata = db.query(\"SELECT * FROM timeseries_data\")\n\n# Machine learning models\nlr = timecraft.LinearRegression()\nlr.fit(X_train, y_train)\n\n# Forecasting with Prophet (if available)\nmodel = timecraft.TimeCraftAI()\nforecasts = model.forecast_prophet(data)\n</code></pre>"},{"location":"README.en/#command-and-flag-descriptions","title":"Command and Flag Descriptions","text":"<ul> <li><code>--data</code>: Path to the data file.</li> <li><code>--date_column</code>: Name of the date column.</li> <li><code>--value_columns</code>: Value columns to analyze.</li> <li><code>--is_csv</code>: Indicates if the file is CSV.</li> <li><code>--model</code>: Model type (<code>timecraft</code>, <code>classifier</code>, <code>regression</code>).</li> </ul>"},{"location":"README.en/#configuration","title":"Configuration","text":"<p>TimeCraft can be configured via command-line arguments or directly in Python code. For advanced configurations, see the examples in the <code>/tutorials</code> folder.</p>"},{"location":"README.en/#scheduled-execution","title":"Scheduled Execution","text":"<p>TimeCraft allows you to schedule automatic model runs, similar to a cronjob.</p> <p>Via CLI:</p> <pre><code>python -m timecraft_ai schedule &lt;interval_seconds&gt; &lt;model&gt;\n</code></pre> <ul> <li><code>&lt;interval_seconds&gt;</code>: interval between executions (e.g., 600 for 10 minutes)</li> <li><code>&lt;model&gt;</code>: model type (<code>timecraft</code>, <code>classifier</code>, <code>regression</code>)</li> </ul> <p>Via Python:</p> <pre><code>from timecraft_ai import run_scheduled\nrun_scheduled(model.run, interval_seconds=600)\n</code></pre> <p>The scheduler runs in the background and can be stopped with Ctrl+C.</p>"},{"location":"README.en/#webhook-notifications","title":"Webhook Notifications","text":"<p>TimeCraft supports sending notifications to webhooks after model runs or analyses. Ideal for automation, monitoring, or integration with other systems (Slack, Discord, custom APIs).</p>"},{"location":"README.en/#how-it-works","title":"How it works","text":"<ul> <li>Pass the <code>webhook_url</code> parameter to the <code>run</code> or <code>run_analysis</code> methods.</li> <li>When finished, a POST with a JSON payload is sent to the URL.</li> <li>Extra fields can be added via <code>webhook_payload_extra</code>.</li> </ul> <p>Example:</p> <pre><code>model.run(webhook_url=\"https://your-webhook.com/webhook\")\n</code></pre> <p>With extra payload:</p> <pre><code>model.run(\n    webhook_url=\"https://your-webhook.com/webhook\",\n    webhook_payload_extra={\"user\": \"rafa\", \"run_type\": \"nightly\"}\n)\n</code></pre> <p>Slack:</p> <pre><code>model.run(\n    webhook_url=\"https://hooks.slack.com/services/XXX/YYY/ZZZ\",\n    webhook_payload_extra={\"text\": \"TimeCraft finished!\"}\n)\n</code></pre> <p>Discord:</p> <pre><code>model.run(\n    webhook_url=\"https://discord.com/api/webhooks/XXX/YYY\",\n    webhook_payload_extra={\"content\": \"TimeCraft finished!\"}\n)\n</code></pre> <p>The payload can be customized for each platform using <code>webhook_payload_extra</code>.</p>"},{"location":"README.en/#roadmap","title":"Roadmap","text":"<p>\ud83d\udd1c Upcoming Features:</p> <ul> <li>Support for cloud data sources (BigQuery, Snowflake)</li> <li>Email notification system</li> <li>Dashboard for result visualization</li> </ul>"},{"location":"README.en/#contributing","title":"Contributing","text":"<p>Contributions are welcome! See the Contributing Guide for details.</p>"},{"location":"README.en/#contact","title":"Contact","text":"<p>\ud83d\udc8c Developer: Rafael Mori \ud83d\udcbc faelmori/timecraft on GitHub LinkedIn: Rafa Mori</p>"},{"location":"README.pt-BR/","title":"README pt-BR","text":"<p>Uma solu\u00e7\u00e3o avan\u00e7ada para an\u00e1lise de s\u00e9ries temporais, integra\u00e7\u00e3o com bancos de dados e automa\u00e7\u00e3o de tarefas, com notifica\u00e7\u00f5es din\u00e2micas e uma poderosa CLI.</p>"},{"location":"README.pt-BR/#tabela-de-conteudos","title":"\ud83d\udcd6 Tabela de Conte\u00fados","text":"<ol> <li>Sobre o Projeto</li> <li>Funcionalidades</li> <li>Instala\u00e7\u00e3o</li> <li>Uso<ul> <li>CLI</li> <li>Exemplos Python</li> <li>Configura\u00e7\u00e3o</li> </ul> </li> <li>Execu\u00e7\u00e3o Agendada</li> <li>Notifica\u00e7\u00f5es Webhook</li> <li>Roadmap</li> <li>Contribuindo</li> <li>Contato</li> </ol>"},{"location":"README.pt-BR/#sobre-o-projeto","title":"Sobre o Projeto","text":"<p>TimeCraft \u00e9 uma solu\u00e7\u00e3o flex\u00edvel e poderosa para an\u00e1lise de s\u00e9ries temporais, integra\u00e7\u00e3o com bancos de dados e automa\u00e7\u00e3o de tarefas. Desenvolvido em Python, oferece suporte a notifica\u00e7\u00f5es via webhooks, execu\u00e7\u00e3o agendada de modelos e uma CLI intuitiva para facilitar fluxos de trabalho de dados.</p> <p>Por que TimeCraft?</p> <ul> <li>\ud83d\udcc8 An\u00e1lise Avan\u00e7ada: Scripts robustos para modelagem, previs\u00e3o e avalia\u00e7\u00e3o de dados temporais.</li> <li>\ud83d\udee2\ufe0f Integra\u00e7\u00e3o Simples: Ferramentas para conectar e consultar m\u00faltiplos bancos de dados.</li> <li>\u2699\ufe0f Automa\u00e7\u00e3o e Notifica\u00e7\u00f5es: M\u00f3dulos para automatizar fluxos de dados e enviar alertas.</li> </ul>"},{"location":"README.pt-BR/#funcionalidades","title":"Funcionalidades","text":"<p>\u2728 Modelos Plug-and-Play:</p> <ul> <li>ARIMA, Prophet, LSTM e outros modelos prontos para uso.</li> <li>F\u00e1cil customiza\u00e7\u00e3o e extens\u00e3o.</li> </ul> <p>\ud83d\udd17 Integra\u00e7\u00e3o com Bancos de Dados:</p> <ul> <li>Conex\u00e3o eficiente com diferentes sistemas de banco de dados.</li> <li>Scripts para importa\u00e7\u00e3o e consulta de dados.</li> </ul> <p>\u23f0 Execu\u00e7\u00e3o Agendada:</p> <ul> <li>Agende execu\u00e7\u00f5es autom\u00e1ticas de modelos (tipo cronjob).</li> <li>CLI e API Python para agendamento.</li> </ul> <p>\ud83d\udd14 Notifica\u00e7\u00f5es Din\u00e2micas:</p> <ul> <li>Envio de notifica\u00e7\u00f5es via Webhook (Slack, Discord, APIs customizadas).</li> <li>Payloads customiz\u00e1veis para cada plataforma.</li> </ul> <p>\ud83d\udcbb CLI Poderosa:</p> <ul> <li>Comandos simples para rodar modelos, agendar execu\u00e7\u00f5es e monitorar tarefas.</li> <li>Extens\u00edvel para novos fluxos de trabalho.</li> </ul>"},{"location":"README.pt-BR/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Requisitos:</p> <ul> <li>Python 3.11 ou superior.</li> </ul> <pre><code># Clone o reposit\u00f3rio\n git clone https://github.com/rafa-mori/timecraft.git\n cd timecraft\n\n# (Opcional) Crie e ative um ambiente virtual\n python -m venv venv\n source venv/bin/activate  # No Windows: venv\\Scripts\\activate\n\n# Instale as depend\u00eancias\n pip install -r src/timecraft_ai/requirements.txt\n</code></pre>"},{"location":"README.pt-BR/#uso","title":"Uso","text":""},{"location":"README.pt-BR/#cli","title":"CLI","text":"<p>Exemplos de comandos com a CLI do TimeCraft:</p> <pre><code># Rodar modelo TimeCraft\npython -m timecraft_ai run --data data/hist_cambio_float.csv --date_column dt --value_columns purchaseValue,saleValue --is_csv\n\n# Agendar execu\u00e7\u00e3o autom\u00e1tica (a cada 10 minutos)\npython -m timecraft_ai schedule 600 timecraft\n</code></pre>"},{"location":"README.pt-BR/#exemplos-de-uso-em-python","title":"Exemplos de Uso em Python","text":"<pre><code>from timecraft_ai import TimeCraftAI\n\ntc = TimeCraftAI()\nmodel = tc.create_timecraft_model(\n    data=\"data/hist_cambio_float.csv\",\n    date_column=\"dt\",\n    value_columns=[\"purchaseValue\", \"saleValue\"],\n    is_csv=True\n)\nmodel.run()\n</code></pre>"},{"location":"README.pt-BR/#execucao-agendada-em-python","title":"Execu\u00e7\u00e3o Agendada em Python","text":"<pre><code>from timecraft_ai import run_scheduled\nrun_scheduled(model.run, interval_seconds=600)  # Executa a cada 10 minutos\n</code></pre>"},{"location":"README.pt-BR/#descricao-dos-comandos-e-flags","title":"Descri\u00e7\u00e3o dos Comandos e Flags","text":"<ul> <li><code>--data</code>: Caminho para o arquivo de dados.</li> <li><code>--date_column</code>: Nome da coluna de datas.</li> <li><code>--value_columns</code>: Colunas de valores a serem analisadas.</li> <li><code>--is_csv</code>: Indica se o arquivo \u00e9 CSV.</li> <li><code>--model</code>: Tipo de modelo (<code>timecraft</code>, <code>classifier</code>, <code>regression</code>).</li> </ul>"},{"location":"README.pt-BR/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>O TimeCraft pode ser configurado via argumentos de linha de comando ou diretamente no c\u00f3digo Python. Para configura\u00e7\u00f5es avan\u00e7adas, consulte os exemplos na pasta <code>/tutorials</code>.</p>"},{"location":"README.pt-BR/#execucao-agendada","title":"Execu\u00e7\u00e3o Agendada","text":"<p>O TimeCraft permite agendar execu\u00e7\u00f5es autom\u00e1ticas de modelos, similar a um cronjob.</p> <p>Via CLI:</p> <pre><code>python -m timecraft_ai schedule &lt;intervalo_segundos&gt; &lt;modelo&gt;\n</code></pre> <ul> <li><code>&lt;intervalo_segundos&gt;</code>: intervalo entre execu\u00e7\u00f5es (ex: 600 para 10 minutos)</li> <li><code>&lt;modelo&gt;</code>: tipo de modelo (<code>timecraft</code>, <code>classifier</code>, <code>regression</code>)</li> </ul> <p>Via Python:</p> <pre><code>from timecraft_ai import run_scheduled\nrun_scheduled(model.run, interval_seconds=600)\n</code></pre> <p>O agendador roda em background e pode ser interrompido com Ctrl+C.</p>"},{"location":"README.pt-BR/#notificacoes-webhook","title":"Notifica\u00e7\u00f5es Webhook","text":"<p>O TimeCraft suporta envio de notifica\u00e7\u00f5es para webhooks ap\u00f3s execu\u00e7\u00f5es de modelos ou an\u00e1lises. Ideal para automa\u00e7\u00e3o, monitoramento ou integra\u00e7\u00e3o com outros sistemas (Slack, Discord, APIs customizadas).</p>"},{"location":"README.pt-BR/#como-funciona","title":"Como funciona","text":"<ul> <li>Passe o par\u00e2metro <code>webhook_url</code> para os m\u00e9todos <code>run</code> ou <code>run_analysis</code>.</li> <li>Ao finalizar, um POST com payload JSON \u00e9 enviado para a URL.</li> <li>Campos extras podem ser adicionados via <code>webhook_payload_extra</code>.</li> </ul> <p>Exemplo:</p> <pre><code>model.run(webhook_url=\"https://seu-webhook.com/webhook\")\n</code></pre> <p>Com payload extra:</p> <pre><code>model.run(\n    webhook_url=\"https://seu-webhook.com/webhook\",\n    webhook_payload_extra={\"user\": \"rafa\", \"run_type\": \"nightly\"}\n)\n</code></pre> <p>Slack:</p> <pre><code>model.run(\n    webhook_url=\"https://hooks.slack.com/services/XXX/YYY/ZZZ\",\n    webhook_payload_extra={\"text\": \"TimeCraft finalizou!\"}\n)\n</code></pre> <p>Discord:</p> <pre><code>model.run(\n    webhook_url=\"https://discord.com/api/webhooks/XXX/YYY\",\n    webhook_payload_extra={\"content\": \"TimeCraft finalizou!\"}\n)\n</code></pre> <p>O payload pode ser customizado conforme a plataforma usando <code>webhook_payload_extra</code>.</p>"},{"location":"README.pt-BR/#roadmap","title":"Roadmap","text":"<p>\ud83d\udd1c Pr\u00f3ximos Recursos:</p> <ul> <li>Suporte a fontes de dados em nuvem (BigQuery, Snowflake)</li> <li>Sistema de notifica\u00e7\u00f5es por e-mail</li> <li>Dashboard para visualiza\u00e7\u00e3o de resultados</li> </ul>"},{"location":"README.pt-BR/#contribuindo","title":"Contribuindo","text":"<p>Contribui\u00e7\u00f5es s\u00e3o bem-vindas! Veja o Guia de Contribui\u00e7\u00e3o para detalhes.</p>"},{"location":"README.pt-BR/#contato","title":"Contato","text":"<p>\ud83d\udc8c Developer: Rafael Mori \ud83d\udcbc faelmori/timecraft no GitHub LinkedIn: Rafa Mori</p>"}]}