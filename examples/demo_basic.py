#!/usr/bin/env python3
"""
üéØ TimeCraft AI - Demonstra√ß√£o B√°sica
====================================

Este script demonstra as funcionalidades b√°sicas do TimeCraft AI.
Inclui an√°lise de s√©ries temporais, conex√£o com banco de dados e recursos de AI.

Pode ser executado tanto em ambiente de desenvolvimento quanto com package instalado.
"""

import argparse
import os
import sys

from ..src.timecraft_ai import ai, core

# Try to import from installed package first, fallback to dev environment
try:
    if core:
        from ..src.timecraft_ai.core import (
            DatabaseConnector,
            LinearRegression,
            RandomForestClassifier,
            TimeCraftAI,
        )

    if ai:
        from ..src.timecraft_ai.ai import (
            AI_MODULES_AVAILABLE,
            AudioProcessor,
            ChatbotActions,
            VoiceSynthesizer,
        )

    DEV_MODE = False
    print("üì¶ Usando TimeCraft AI instalado como package")
except ImportError:
    # Development mode - add src to path
    src_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "src")
    if os.path.exists(src_path):
        sys.path.insert(0, src_path)
        if core:
            # Importar as classes principais do core
            from ..src.timecraft_ai.core import (
                DatabaseConnector,
                LinearRegression,
                RandomForestClassifier,
                TimeCraftAI,
            )
        else:
            print("‚ö†Ô∏è M√≥dulo core n√£o encontrado. Verifique a instala√ß√£o.")
            sys.exit(1)

        if ai:
            # Importar os m√≥dulos de AI
            from ..src.timecraft_ai.ai import (
                AI_MODULES_AVAILABLE,
                AudioProcessor,
                ChatbotActions,
                VoiceSynthesizer,
            )
        else:
            print("‚ö†Ô∏è M√≥dulo AI n√£o encontrado. Verifique a instala√ß√£o.")
            sys.exit(1)

        DEV_MODE = True
        print("üîß Usando TimeCraft AI em modo desenvolvimento")
    else:
        print("‚ùå TimeCraft AI n√£o encontrado. Instale com: make install-dev")
        sys.exit(1)

# Verificar se o m√≥dulo de AI est√° dispon√≠vel
try:
    from ..src.timecraft_ai.ai import (
        AI_MODULES_AVAILABLE,
        AudioProcessor,
        ChatbotActions,
        VoiceSynthesizer,
    )

    AI_AVAILABLE = (
        hasattr(AI_MODULES_AVAILABLE, "AI_AVAILABLE") and AI_MODULES_AVAILABLE
    )
except ImportError:
    AI_AVAILABLE = False
    print("‚ö†Ô∏è M√≥dulos de AI n√£o dispon√≠veis. Instale com: make install-ai")


def demo_core_features():
    """Demonstra as funcionalidades principais do TimeCraft AI"""
    print("\nüîß === DEMONSTRA√á√ÉO CORE === ")

    try:
        # Criar inst√¢ncia principal
        tc = core.TimeCraftAI()
        print("‚úÖ TimeCraftAI criado com sucesso")

        # Testar conex√£o com banco (sem conectar realmente)
        db = core.DatabaseConnector("sqlite")
        print("‚úÖ DatabaseConnector criado com sucesso")

        # Testar modelos de ML
        lr = core.LinearRegression()
        print("‚úÖ LinearRegression criado com sucesso")

        rf = core.RandomForestClassifier()
        print("‚úÖ RandomForestClassifier criado com sucesso")

        print("üéâ Todas as funcionalidades core funcionando!")

    except Exception as e:
        print(f"‚ùå Erro nas funcionalidades core: {e}")
        return False

    return True


def demo_ai_features():
    """Demonstra as funcionalidades de AI (se dispon√≠veis)"""
    print("\nü§ñ === DEMONSTRA√á√ÉO AI === ")

    if not AI_AVAILABLE:
        print("‚ö†Ô∏è Recursos de AI n√£o dispon√≠veis")
        print("üí° Para instalar: make install-ai")
        return False

    try:
        # Testar processamento de √°udio
        if ai:
            audio = ai.AudioProcessor()
            print("‚úÖ AudioProcessor criado com sucesso")

        # Testar chatbot
        if ai.ChatbotActions:
            chatbot = ai.ChatbotActions()
            print("‚úÖ ChatbotActions criado com sucesso")

        # Testar s√≠ntese de voz
        if ai.VoiceSynthesizer:
            voice = ai.VoiceSynthesizer()
            print("‚úÖ VoiceSynthesizer criado com sucesso")

        print("üéâ Recursos de AI funcionando!")

    except Exception as e:
        print(f"‚ùå Erro nos recursos de AI: {e}")
        return False

    return True


def demo_data_analysis():
    """Demonstra an√°lise de dados b√°sica"""
    print("\nüìä === DEMONSTRA√á√ÉO AN√ÅLISE DE DADOS ===")

    try:
        import numpy as np
        import pandas as pd

        # Criar dados de exemplo
        dates = pd.date_range("2023-01-01", periods=100, freq="D")
        values = np.random.randn(100).cumsum() + 100

        data = pd.DataFrame({"date": dates, "value": values})

        print(f"‚úÖ Dados criados: {len(data)} registros")
        print(f"üìà Valor m√©dio: {data['value'].mean():.2f}")
        print(f"üìä Desvio padr√£o: {data['value'].std():.2f}")

        # Testar TimeCraftAI com dados
        tc = core.TimeCraftAI()
        print("‚úÖ Pronto para a an√°lise de s√©ries temporais")

        return True

    except Exception as e:
        print(f"‚ùå Erro na an√°lise de dados: {e}")
        return False


def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    parser = argparse.ArgumentParser(description="TimeCraft AI - Demo B√°sico")
    parser.add_argument(
        "--test", action="store_true", help="Executar apenas testes r√°pidos"
    )

    args = parser.parse_args()

    print("üéØ TimeCraft AI - Demonstra√ß√£o B√°sica")
    print("=" * 50)
    print("üì¶ Vers√£o: {getattr(core, '__version__', 'N/A')}")
    print("üîß Modo: {'Desenvolvimento' if DEV_MODE else 'Produ√ß√£o'}")
    print()

    success = True

    # Testar funcionalidades core
    if not demo_core_features():
        success = False

    # Testar funcionalidades de AI
    if not demo_ai_features():
        print("‚ÑπÔ∏è Continuando sem recursos de AI...")

    # Testar an√°lise de dados
    if not args.test:
        if not demo_data_analysis():
            success = False

    print("\n" + "=" * 50)
    if success:
        print("üéâ Demonstra√ß√£o conclu√≠da com sucesso!")
        print("\nüí° Pr√≥ximos passos:")
        print("  üìö Consulte a documenta√ß√£o em docs/")
        print("  üéÆ Execute o demo avan√ßado: python examples/demo_advanced.py")
        if DEV_MODE:
            print("  üîß Comandos make dispon√≠veis: make help")
    else:
        print("‚ö†Ô∏è Demonstra√ß√£o conclu√≠da com alguns problemas")
        print("üí° Verifique as depend√™ncias e tente novamente")

    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())
