name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy

    - name: Install AI dependencies (non-Windows)
      if: matrix.os != 'windows-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-pyaudio alsa-utils
        pip install -r requirements-ai.txt
      continue-on-error: true

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with Black
      run: |
        black --check src/ examples/ --diff

    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      continue-on-error: false

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json || true

  docs-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material

    - name: Build documentation
      run: |
        mkdocs build --no-strict -c

    - name: Test documentation links
      run: |
        # Add link checking if desired
        echo "Documentation built successfully"

  release-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, security-scan, docs-build]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if version tag exists
      id: check_tag
      run: |
        VERSION=$(grep -o 'version = "[^"]*"' setup.py | cut -d'"' -f2 || echo "")
        if [ -z "$VERSION" ]; then
          # Fallback: try to get version from pyproject.toml or __init__.py
          VERSION=$(grep -o '__version__ = "[^"]*"' src/timecraft_ai/__init__.py | cut -d'"' -f2 || echo "1.1.1")
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        if git tag | grep -q "v$VERSION"; then
          echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
        fi

    - name: Create tag if needed
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.check_tag.outputs.VERSION }}" -m "Release v${{ steps.check_tag.outputs.VERSION }}"
        git push origin "v${{ steps.check_tag.outputs.VERSION }}"
