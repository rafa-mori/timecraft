name: Publish to PyPI

# Workflow will run only for actors that are relevant to publishing a new version of the package to PyPI.
# This includes pull requests, pushes to tags that match semantic versioning, and manual triggers.
# The workflow is designed to ensure that the package is built, versioned correctly, and published to PyPI only when appropriate conditions are met.
# The workflow is triggered by the following events (only by faelmori, all of them):
# - Pull requests targeting the main branch
# - Pushes that create or update tags matching the semantic versioning pattern `v*.*.*`
# - Manual triggers via the GitHub Actions UI
# - Scheduled runs (commented out, can be enabled for daily builds)

on:
  # The `pull_request` event triggers the workflow when a pull request is opened, synchronized, or reopened.
  # This is useful for running tests and checks on code changes before they are merged into the main branch.
  # The `branches` filter ensures that the workflow only runs for pull requests targeting the main branch.
  # if: github.actor == 'faelmori'  # Only run for pull requests by faelmori
  pull_request:
    types: [opened, synchronize, reopened]  # Run on pull request events
    # The `branches` filter ensures that the workflow only runs for pull requests targeting the main
    branches:
      - main  # Run for pull requests targeting the main branch

  # The `push` event triggers the workflow when code is pushed to the repository.
  # The `tags` filter ensures that the workflow only runs for pushes that create or update tags matching the semantic versioning pattern `v*.*.*`.
  # This is typically used for publishing new releases to PyPI.
  # The `v*.*.*` pattern matches tags like `v1.0.0`, `v2.1.3`, etc., which follow semantic versioning.
  push:
    tags:
      - "v*.*.*"  # Run for tags that match semantic versioning (major.minor.patch)

  # The `workflow_dispatch` event allows the workflow to be triggered manually from the GitHub Actions UI.
  # This is useful for cases where you want to publish a new version to PyPI without needing to push a new commit or tag.
  # It allows for more flexibility in managing releases and deployments.
  workflow_dispatch:
  # The `schedule` event allows the workflow to run on a regular schedule.
  # The `cron` expression specifies that the workflow should run every day at midnight UTC.
  # schedule:
  #   - cron: "0 0 * * *"  # Run daily at midnight UTC

permissions:
  contents: write  # Allows the workflow to push changes to the repository, such as tags
  packages: write  # Allows the workflow to publish packages to PyPI
  id-token: write  # Allows the workflow to request an ID token for authentication with external services

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.actor == 'faelmori'  # Only run for actions by faelmori
    # The `if` condition ensures that the job only runs for actions initiated by the user
    # This is useful for restricting the workflow to specific users or roles, such as the repository owner or a maintainer.
    # This prevents unauthorized users from triggering the workflow and ensures that only trusted actions can publish to PyPI.
    # This is particularly important for workflows that publish packages or make significant changes to the repository.
    steps:
      - name: Validate version
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        id: install_dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)  
          VERSION=${VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Debug version extraction
        id: debug_version
        run: |
          if [ -z "$VERSION" ]; then
            echo "Failed to extract version"
            exit 1
          fi
          echo "Extracted version: $VERSION"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format"
            exit 1
          fi
        env:
          VERSION: ${{ env.VERSION }}

      - name: Check if version is already published
        id: check_version
        run: |
          VERSION=${VERSION:-$(git describe --tags --abbrev=0 | sed 's/^v//')}
          if [ -z "$VERSION" ]; then
            echo "No version found"
            exit 1
          fi
          if [ -z "$VERSION" ]; then
            echo "VERSION is not set"
            exit 1
          fi
          # Check if the version exists on PyPI
          echo "Checking PyPI for version $VERSION"
          if curl -s https://pypi.org/pypi/timecraft-ai/$VERSION/json | grep -v 'Not Found' -q; then
            echo "Version $VERSION already exists on PyPI"
            exit 1
          fi
        env:
          VERSION: ${{ env.VERSION }}

      - name: Package the project
        run: | 
          cd ./src
          if [ -d "./dist" ]; then
            rm -rf ./dist
          fi
          python -m build
          if [ $? -ne 0 ]; then
            echo "Build failed"
            exit 1
          fi
          echo "Build succeeded"

      - name: Check for version bump
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0)
          if [ "$latest_tag" != "v$VERSION" ]; then
            echo "Version bump required"
            exit 1
          fi
          echo "Version bump not required"

      - name: Publish to PyPI
        env:
          # TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing version $VERSION to PyPI"
          cd ./src/dist
          if [ -z "$(ls -A .)" ]; then
            echo "No files to upload"
            exit 1
          fi
          echo "Files to upload:"
          ls -l
          cd ..
          twine upload --non-interactive dist/* --verbose
          if [ $? -ne 0 ]; then
            echo "Upload failed"
            exit 1
          fi
          echo "Upload succeeded"

      - name: Clean up
        run: |
          echo "Cleaning up build artifacts"
          cd ./src
          if [ -d "./dist" ]; then
            rm -rf ./dist
          fi
          if [ -d "./build" ]; then
            rm -rf ./build
          fi
          if [ -f "./*.egg-info" ]; then
            rm -rf ./*.egg-info
          fi
          cd ..
          echo "Cleanup completed successfully"
        continue-on-error: true

      - name: Notify success
        run: |
          echo "Successfully published version $VERSION to PyPI"
          if [ $? -ne 0 ]; then
            echo "Notification failed"
            exit 1
          fi
          echo "Notification succeeded"
        env:
          VERSION: ${{ env.VERSION }}

      # - name: Set output for version
      #   run: echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT

    # This step sets the output variable `version` to the extracted version number.
    # This output can be used in subsequent steps or jobs within the workflow.
    # outputs:
    #   version: ${{ steps.get_version.outputs.VERSION }}
      # The `outputs` section defines the outputs of the job, which can be used by other jobs in the workflow.
      # In this case, it sets the `version` output to the version extracted from the tag.
      # This allows other jobs to access the version number for further processing or notifications.
      # The `version` output can be used in subsequent steps or jobs within the workflow.
      # For example, it can be used to notify users about the new version or to trigger additional actions based on the version number.
      # This is useful for workflows that involve multiple steps or jobs that depend on the version number.
      # The `version` output can be accessed using `${{ steps.get_version.outputs.version }}`.

