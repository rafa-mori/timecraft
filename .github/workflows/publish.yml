name: Publish to PyPI

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

  push:
    tags:
      - "v*.*.*"

  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  deploy-constraints:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate deploy constraints
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ACTOR: ${{ github.actor }}
          EVENT: ${{ github.event_name }}
          IS_FORK: ${{ github.event.repository.fork }}
          REF: ${{ github.ref }}
        run: |
          echo "üîê Validating deployment..."

          CONTRIBUTORS=$(gh api repos/${REPO}/contributors --jq '.[].login' | tr '\n' ' ')
          echo "‚úîÔ∏è Contributors: $CONTRIBUTORS"

          if [[ ! " $CONTRIBUTORS " =~ " $ACTOR " ]]; then
            echo "‚ùå Actor '$ACTOR' is not an authorized contributor."
            exit 1
          fi

          if [[ "$EVENT" != "push" && "$EVENT" != "workflow_dispatch" ]]; then
            echo "‚ùå Only 'push' or manual dispatch allowed. Got '$EVENT'."
            exit 1
          fi

          if [[ "$IS_FORK" == "true" ]]; then
            echo "‚ùå Workflow cannot run from a fork."
            exit 1
          fi

          if [[ ! "$REF" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Tag does not match semver format: $REF"
            exit 1
          fi

          echo "‚úÖ All constraints passed."

  deploy:
    needs: deploy-constraints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Extract and validate version
        id: version
        run: |
          VERSION_TAG=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION_TAG#v}

          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            exit 1
          fi

      - name: Check if version already exists on PyPI (via jq)
        run: |
          echo "üîç Checking PyPI for version $VERSION..."
          VERSION_CHECK=$(curl -s https://pypi.org/pypi/timecraft-ai/$VERSION/json | jq -er '.info.version') && {
            echo "‚ùå Version $VERSION already exists on PyPI as: $VERSION_CHECK"
            exit 1
          } || {
            echo "‚úÖ Version not found on PyPI. Proceeding..."
          }

      - name: Compare with previous tag
        run: |
          git fetch --tags
          current_version=${VERSION}
          previous_tag=$(git tag --sort=-creatordate | grep '^v' | grep -v "v$current_version" | head -n1)
          previous_version=${previous_tag#v}

          echo "Current: $current_version"
          echo "Previous: $previous_version"

          if [[ "$current_version" == "$previous_version" ]]; then
            echo "‚ö†Ô∏è Current version matches previous version. Skipping publish."
            exit 1
          fi

          IFS='.' read -r c_major c_minor c_patch <<< "$current_version"
          IFS='.' read -r p_major p_minor p_patch <<< "$previous_version"

          if [[ "$c_major" -eq "$p_major" && "$c_minor" -eq "$p_minor" && "$c_patch" -eq "$p_patch" ]]; then
            echo "üö´ No semantic change detected. Possibly a reused tag?"
            exit 1
          fi

          echo "‚úÖ Semantic version difference detected. Continuing..."

      - name: Build package
        run: |
          cd src
          rm -rf dist build *.egg-info || true
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          cd src
          echo "üöÄ Publishing version $VERSION to PyPI..."
          twine upload --non-interactive dist/* --verbose

      - name: Confirm success
        run: |
          echo "üéâ Successfully published version $VERSION to PyPI!"
